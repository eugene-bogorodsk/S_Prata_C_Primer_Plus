//
//  tree8.h
//  chapter17
//
//  Created by пупсик on 21.05.2021.
//  Copyright © 2021 пупсик. All rights reserved.
//

#ifndef tree8_h
#define tree8_h

#include<stdbool.h>
//определение типа  Item
typedef struct item
{
    //определение item  для упражнения 8
    int count; //количество животных в массиву petkind
    char petname[20];
    char petkind[10][20]; //массив для хранения типа животных с одинаковой кличкой
} Item;

#define MAXITEMS 10

typedef struct trnode
{
    Item item;
    struct trnode *left;
    struct trnode *right;
} Trnode;

typedef struct tree
{
    Trnode *root;
    int size;
} Tree;

// прототип функций
//операция: инициализация дерева пустым содержимым
//предусловия: ptree указывает на дерево
//постусловия: дерево устанослено в пустое состояние
void InitializeTree(Tree *ptree);

//операция: определение является ли дерево пустым
//предусловия:ptree указывает на дерево
//постусловия:функция возвращает true если дерево пустое и false в протином случае
bool TreeIsEmpty(const Tree *ptree);

//операция: определение является ли дерево полным
//предусловия:ptree указывает на дерево
//постусловия: функция возвращает trueелси дерево полное и false в противном случае
bool TreeIsFull(const Tree *ptree);

//операция: определение количества элементов в дереве
//предусловия: ptree указывае на дерево
//постусловия: функция возвращает количество элементов в дереве
int TreeItemCount(const Tree *ptree);

//операция: добавление элемента к дереву
//предусловия: pi - адрес добавляемого элемента ptree указывает на инициализированное дерево
//постусловие: если возможно функция добавляет элемент к дереву и возвращает true в противном случае возвращает false
bool AddItem(const Item *pi,Tree *ptree);

//операция: поиск элемента в дереве
//предусловия:pi указывает на элемента ptreeуказывает на инициализированное дерево
//постусловия:функция возвращает true если элемент присутствует в дереве и false в противном случае
bool InTree(const Item *pi,const Tree *ptree);

//добавлено для решения задания 7
//возвращает количество слов найденных в дереве если слов нет возвращает 0
int CountOfWords(const Item *pi,const Tree *ptree);

//добавлено для решеня задания 8
//возвращает найденное значение Item
Item FindPet (const Item *pi,const Tree *ptree);
//операция: удаление элемента из дерева
//предусловия:pi - адрес удаляемого элемента ptree указывает на инициализированное дерево
//постусловия:если возможно функция удалаяет элемент из дерева и возвращает true в противном случае возвращает false
bool DeleteItem(const Item *pi,Tree *ptree);

//операция:применение указанной функции к каждому элементу в дереве
//предусловия: ptree указывает на дерево pfun указывает на функцию которая принимает фргумент  Item  и не имеет возвращаемого значани
//постусловия: функция указанная с помощью  pfun выполняется оди раз для каждого элемента в дереве
void Traverse(const Tree*ptree,void(*pfun)(Item item));

//операция: удаление всех элементов из дерева
// предусловия: ptree указывает на инициализированное дерево
//постусловия:дерево является пустым
void DeleteAll(Tree *ptree);

#endif /* tree8_h */
